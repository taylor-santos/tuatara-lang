 %require "3.7"
%language "C++"
%locations
%defines
%parse-param {class Scanner &scanner}

%define api.namespace {yy}
%define api.parser.class {Parser}
%define api.token.constructor
%define api.value.type variant
/* %define api.value.automove // TODO: Uncomment this when AST is implemented */
%define parse.assert
%define parse.trace
%define parse.error verbose
%define parse.lac full
%define api.token.prefix {TOK_}

%{
// This block is inserted at the top of parser.cpp

// Disable compiler-specific warnings for code generated by Bison
#if defined(__clang__)
#elif defined(__GNUC__) || defined(__GNUG__)
#elif defined(_MSC_VER)
#    pragma warning(disable:                                                                                           \
         4065 /* switch statement contains 'default' but no 'case' labels */                                           \
         4127 /* conditional expression is constant */                                                                 \
         4244 /* 'return': conversion from 'std::streamsize' to 'int', possible loss of data */                        \
     )
#endif

#include "scanner.hpp"

#define yylex scanner.scan

%}

%code requires {
// This block is inserted at the top of parser.hpp

// Disable compiler-specific warnings for code generated by Bison
#if defined(__clang__)
#    pragma clang diagnostic push
#elif defined(__GNUC__) || defined(__GNUG__)
#    pragma GCC diagnostic push
#elif defined(_MSC_VER)
#    pragma warning(push)
#    pragma warning(disable:                                                                                           \
         4065 /* switch statement contains 'default' but no 'case' labels */                                           \
     )
#endif

} // %code requires

%code provides {
// This block is inserted at the bottom of parser.hpp

#if defined(__clang__)
#    pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#    pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#    pragma warning(pop)
#endif

} // %code provides

/* TOKENS */
%token
    EOF 0       "end of file"
    SEMICOLON   ";"
    TYPE_DECL   "::"
    DEFINE      ":="

%token<uint64_t>
    U64     "u64"

%token<std::string>
    IDENT       "identifier"
    TYPENAME    "type name"

%start file

%%

file
    : %empty {}
    | expressions {}

expressions
    : expression ";" {}
    | expressions expression ";" {}

expression
    : definition {}
    | simple_expression {}

definition
    : "identifier" ":=" expression {}
    | "identifier" "::" type {}

simple_expression
    : literal {}
    | "identifier" {}
    | error {}

literal
    : "u64" {}

type
    : "type name" {}
    | error {}

%%

// This block is inserted at the bottom of parser.cpp

namespace yy {

void
Parser::error(const location &loc, const std::string &message) {
    scanner.report_error(loc, message);
}

}
