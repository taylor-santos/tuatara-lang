%require "3.7"
%language "C++"
%locations
%defines
%parse-param {class Scanner &scanner}
%parse-param {std::vector<print::Message> &errors}
%parse-param {std::vector<std::unique_ptr<AST::Expression>> &ast_out}

%define api.namespace {yy}
%define api.parser.class {Parser}
%define api.token.constructor
%define api.value.type variant
%define api.value.automove
%define parse.assert
%define parse.trace
%define parse.error custom
%define parse.lac full
%define api.token.prefix {TOK_}

%code requires {
// This block is inserted at the top of parser.hpp

// Disable compiler-specific warnings for code generated by Bison
#if defined(__clang__)
#    pragma clang diagnostic push
#elif defined(__GNUC__) || defined(__GNUG__)
#    pragma GCC diagnostic push
#elif defined(_MSC_VER)
#    pragma warning(push)
#    pragma warning(disable:                                                                                           \
         4065 /* switch statement contains 'default' but no 'case' labels */                                           \
     )
#endif

#include "ast/ast_includes.hpp"
#include "printer.hpp"

} // %code requires

%code provides {
// This block is inserted at the bottom of parser.hpp

#if defined(__clang__)
#    pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#    pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#    pragma warning(pop)
#endif

} // %code provides

%{
// This block is inserted at the top of parser.cpp

// Disable compiler-specific warnings for code generated by Bison
#if defined(__clang__)
#elif defined(__GNUC__) || defined(__GNUG__)
#elif defined(_MSC_VER)
#    pragma warning(disable:                                                                                           \
         4065 /* switch statement contains 'default' but no 'case' labels */                                           \
         4127 /* conditional expression is constant */                                                                 \
         4244 /* 'return': conversion from 'std::streamsize' to 'int', possible loss of data */                        \
     )
#endif

#include "scanner.hpp"

#define yylex scanner.scan

#define NODE(type, ...) std::make_unique<AST:: type>(__VA_ARGS__)

%}

%initial-action {
    // Invoked before parsing each time parse() is called.
}

/* TOKENS */
%token
    EOF 0       "end of file"
    SEMICOLON   ";"
    TYPE_DECL   "::"
    DEFINE      ":="

%token<uint64_t>
    U64     "`U64` literal"

%token<std::string>
    IDENT       "identifier"
    TYPENAME    "type name"

%type<std::vector<std::unique_ptr<AST::Expression>>>
    expressions

%type<std::unique_ptr<AST::Expression>>
    line
    expression

%type<std::unique_ptr<AST::Definition>>
    definition

%type<std::unique_ptr<AST::SimpleExpression>>
    simple_expression

%type<std::unique_ptr<AST::Literal>>
    literal

%type<std::unique_ptr<AST::Type>>
    type

%start file

%%

file
    : %empty {
        ast_out.clear();
    }
    | expressions {
        ast_out = $1;
    }

expressions
    : line {
        $$.emplace_back($1);
    }
    | expressions line {
        $$ = $1;
        $$.emplace_back($2);
    }

line
    : expression ";" {
        $$ = $1;
    }
    | "identifier" ":=" error ";" {
        $$ = NODE(ValueDefinition, $1, @1, NODE(Error, @3), @$);
    }
    | "identifier" ":=" expression error ";" {
        $$ = NODE(ValueDefinition, $1, @1, $3, @$);
    }
    | "identifier" "::" type error ";" {
        $$ = NODE(TypeDefinition, $1, @1, $3, @$);
    }
    | "identifier" "::" error ";" {
        $$ = NODE(TypeDefinition, $1, @1, NODE(Error, @3), @$);
    }
    | error ";" {
        $$ = NODE(Error, @1);
    }

expression
    : definition {
        $$ = $1;
    }
    | simple_expression {
        $$ = $1;
    }

definition
    : "identifier" ":=" expression {
        $$ = NODE(ValueDefinition, $1, @1, $3, @$);
    }
    | "identifier" "::" type {
        $$ = NODE(TypeDefinition, $1, @1, $3, @$);
    }

simple_expression
    : literal {
        $$ = $1;
    }
    | "identifier" {
        $$ = NODE(Variable, $1, @$);
    }

literal
    : "`U64` literal" {
        $$ = NODE(U64, $1, @$);
    }

type
    : "type name" {
        $$ = NODE(ObjectType, $1, @1, @$);
    }

%%

// This block is inserted at the bottom of parser.cpp

#include <iomanip>

namespace yy {

static std::vector<print::colored_text>
symbol_kind_name(const yy::Parser::symbol_kind_type &kind) {
    using namespace print;
    switch (kind) {
        case Parser::symbol_kind::S_SEMICOLON:
            return {
                {"`", color::bold_gray},
                {";", color::bold_red},
                {"`", color::bold_gray}
            };
        case Parser::symbol_kind::S_TYPE_DECL:
            return {
                {"`", color::bold_gray},
                {"::", color::bold_red},
                {"`", color::bold_gray}
            };
        case Parser::symbol_kind::S_DEFINE:
            return {
                {"`", color::bold_gray},
                {":=", color::bold_red},
                {"`", color::bold_gray}
            };
        case Parser::symbol_kind::S_U64:
            return {{"`U64` literal", color::bold_gray}};
        case Parser::symbol_kind::S_IDENT:
            return {{"identifier", color::bold_gray}};
        case Parser::symbol_kind::S_TYPENAME:
            return {{"type name", color::bold_gray}};
        case Parser::symbol_kind::S_YYEMPTY:
        case Parser::symbol_kind::S_YYEOF:
        case Parser::symbol_kind::S_YYerror:
        case Parser::symbol_kind::S_YYUNDEF:
        case Parser::symbol_kind::S_YYACCEPT:
        case Parser::symbol_kind::S_file:
        case Parser::symbol_kind::S_expressions:
        case Parser::symbol_kind::S_line:
        case Parser::symbol_kind::S_expression:
        case Parser::symbol_kind::S_definition:
        case Parser::symbol_kind::S_simple_expression:
        case Parser::symbol_kind::S_literal:
        case Parser::symbol_kind::S_type:
            break;
    }
    return {{yy::Parser::symbol_name(kind), color::bold_gray}};
}

static std::vector<print::colored_text>
symbol_type_name(const yy::Parser::symbol_type &tok) {
    using namespace print;
    auto kind = tok.kind();
    switch (kind) {
        case Parser::symbol_kind::S_U64:
            return {
                {"`U64` literal `", color::bold_gray},
                {std::to_string(tok.value.as<std::uint64_t>()), color::bold_red},
                {"`", color::bold_gray}
            };
        case Parser::symbol_kind::S_IDENT:
            return {
                {"identifier `", color::bold_gray},
                {tok.value.as<std::string>(), color::bold_red},
                {"`", color::bold_gray}
            };
        case Parser::symbol_kind::S_TYPENAME:
            return {
                {"type name `", color::bold_gray},
                {tok.value.as<std::string>(), color::bold_red},
                {"`", color::bold_gray}
            };
        default:
            break;
    }
    return symbol_kind_name(kind);
}

void
Parser::report_syntax_error(yy::Parser::context const &ctx) const {
    using namespace print;

    auto &loc = ctx.location();
    // auto  tok = ctx.token();
    auto &lah = ctx.lookahead();
    auto  num = ctx.expected_tokens(nullptr, 0);
    auto  exp = std::vector<Parser::symbol_kind_type>(num);
    ctx.expected_tokens(&exp[0], num);

    auto message = Message::error(loc.begin)
                   .with_message("expected ", color::bold_gray);
    std::string sep;
    for (size_t i = 0; i < exp.size() - 1; i++) {
        message.with_message(sep, color::bold_gray);
        for (auto s : symbol_kind_name(exp[i])) {
            message.with_message(s);
        }
        sep = ", ";
    }
    if (exp.size() > 1) {
        message.with_message(" or ", color::bold_gray);
    }
    for (auto s : symbol_kind_name(exp.back())) {
        message.with_message(s);
    }
    message.with_message(", found ", color::bold_gray);
    for (auto s : symbol_type_name(lah)) {
        message.with_message(s);
    }
    message.with_detail(loc, color::bold_red)
           .with_message("unexpected ", color::bold_gray);
    for (auto m : symbol_type_name(lah)) {
        message.with_message(m);
    }
    errors.push_back(message);
}

void
Parser::error(const location &loc, const std::string &message) {
    using namespace print;
    errors.push_back(
        Message::error(loc.begin)
                .with_message(message, color::bold_gray)
                .with_detail(loc, color::bold_red)
                .with_message(message, color::bold_gray)
    );
}

} // namespace yy
